{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"docs/about/","title":"About","text":"<p>This page contains education topics which cover following:</p> <ul> <li>Working with terminal and editors</li> <li>(in progress) Ability to setup your own custom,dedicated envorinment for tests</li> <li> <p>(todo) Configure linux servers via automation tools like:</p> <ul> <li>Ansible</li> <li>Terraform </li> </ul> </li> <li> <p>(todo) Manage ansible playbooks from UI (User interface)</p> </li> <li>(todo) Working with code version control (Git)</li> <li> <p>(todo) Working with public Clouds:</p> <ul> <li>AWS</li> <li>Azure</li> </ul> </li> </ul>"},{"location":"docs/plan/","title":"Education plan","text":"<p>Step 1. Read Base article about Terminals and  Editors</p> <p>Step 2. Do Lab about using VI editor</p> <p>Step 3. Read Base article about Virtualization concept</p> <p>Step 4. Do Lab about using Parallels for VMs Management</p> <p>Step 5. Read Base article about SSH tool</p> <p>Step 6. Do lab about using SSH tool</p>"},{"location":"docs/Base/ssh/","title":"SSH - Remote access","text":"<p>ssh is a tool which allows to connect to remote laptop/server.</p> <p>Usually all laptops/servers on linux/MacOs have such tool.</p>"},{"location":"docs/Base/ssh/#access-with-loginpassword","title":"Access with login/password","text":"<p>Below is syntax of using</p> <pre><code>ssh &lt;user&gt;@&lt;server_name or ip&gt;\n</code></pre> <p>Example:</p> <p>if we want to connect to server with ip 10.211.55.9 with user user1</p> <pre><code>ssh user1@10.211.55.9\n</code></pre> <p>Terminal asks password for user1 to allow access to 10.211.55.9</p> <p>Once you enter correct password for user1 you will be able to login to 10.211.55.9 server.</p>"},{"location":"docs/Base/ssh/#passwordless-access","title":"Passwordless access","text":"<p>In automation world, scripts sometimes are required to connect to remote servers for running some commands and it is unacceptable to enter password manually each time when your script tries to connect to remote server.</p> <p>For such scenario where we need to get access to remote server without password we need to create special ssh key which we can use as atrust proof for remote server.</p> <p>Step 1. Create new ssh key.</p> <p>We use toolwith name ssh-keygen which generates two keys.</p> <ul> <li>Public key - we copy such key to remote server</li> <li>Private key - out personal key which we will use to remote connect to server with preinstalled our public key</li> </ul> Note <p>Public key is always assosiate only with one single private key. Pair public/private keys  is uniq. We can create many public/private keys but specific public key always belong to their private key which is generated at the same time.</p> <pre><code>ssh-keygen\n</code></pre> <p>Press Enter on all questions. it will create private/public key pair in default place</p> <p></p> <p>Step 2. Locate your keys</p> <pre><code>ls -l ~/.ssh/\n</code></pre> <ul> <li>id_rsa - is private ssh key</li> <li>id_rsa.pub - is public ssh key</li> </ul> <p>Step 3. Use ssh keys for passwordless remote connection</p> <p>For using such key we need to add our public ssh key to remote host</p> <p><pre><code>ssh-copy-id -i ~/.ssh/id_rsa.pub user1@10.211.55.9\n</code></pre> Enter password</p> <p></p> <p>Login to remote host with using our own ssh private key</p> <p>ssh -i ~/.ssh/id_rsa user1@10.211.55.9</p>"},{"location":"docs/Base/ssh/#execute-remote-command-via-ssh-on-remote-host","title":"Execute remote command via ssh on remote host","text":"<p>ssh tool allows us to run command on remote host as well as just login to one</p> <pre><code>Syntax: ssh -i &lt;private_key&gt; &lt;user&gt;@&lt;host&gt; &lt;command&gt;\n</code></pre> <p>Example:</p> <pre><code>ssh -i ~/.ssh/id_rsa user1@10.211.55.9 date\n</code></pre> <p>Such command run command date which shows time and date on remote server.</p> <p></p>"},{"location":"docs/Base/terminals/","title":"Terminals and Editors","text":""},{"location":"docs/Base/terminals/#terminals","title":"Terminals","text":"<p>In Linux world(MacOS as well) there is only one main terminal. It is command line interface.</p> <p></p> <p>In MacOS(name of Operation system for Macbook) terminal application can be found in \"Application\" folder or in bottom panel of icons</p> <p></p>"},{"location":"docs/Base/terminals/#there-are-several-editors","title":"There are several editors","text":"<p>They are allow to edit content of files in Linux/MacOS like notepad. All editors below work only with plain text format(simple text, no formatting like in Word). </p> <ul> <li>vi (vim)</li> <li>nano</li> <li>gedit (grafical editor)</li> </ul>"},{"location":"docs/Base/terminals/#vivim","title":"VI(VIM)","text":"<p>Vi is a  main and the  most popular editor which is available in every linux like operation system.</p> <p>Usage example:</p> <p>Step 1. create new text file(testfile.txt) and start editing</p> <p>From terminal execute:</p> <pre><code>vi testfile.txt\n</code></pre> <p>and Tap  <p>Step 2. Tap ESC + i to start modifing the file</p> <p>VI restrictions</p> <p>Editor supports cursor moving(array buttons) and erasing charachers(delete button) But vi doesnt support mouse cursor moving like in Word</p> <p>When you tap ESC + i you will see status of editor in a bottom of a vi screen Like this (-- INSERT --) line</p> <p></p> <p>If you don't see such status, check the keyboard language(must be eng)</p> <p>Step 3. To exit from editor Tap ESC + :wq and  <p>Step 4. To show content of any text file use cat linux command</p> <pre><code>cat testfile.txt\n</code></pre> <p>VIM is enchanced version of vi editor(same hot keys) and highlight syntax like this</p> <p></p>"},{"location":"docs/Base/terminals/#nano","title":"Nano","text":"<p>Nano is second popular editor and doesnt require to be learnt</p>"},{"location":"docs/Base/terminals/#gedit","title":"Gedit","text":"<p>Gedit is grafical editor and can be used only if Linux server has grafical interface(where we can use mouse cursor and icons in Desktop).</p> <p>All Linux servers don't have Grafical interface(because it consumes resources). All admins use only temninal mode in linux.</p>"},{"location":"docs/Base/terminals/#useful-links","title":"Useful Links","text":"<ul> <li>Vi editor hot keys</li> <li>Russian article about vi</li> </ul>"},{"location":"docs/Base/vagrant/","title":"Virtualization concept","text":"<p>This page is described how to install, configure and use vagrant tool</p> <p>Vagrant is a tool which help to install (VM)Virtual Machine(it is isolated operation system(linux or windows) in your laptop or server or public clouds. </p>"},{"location":"docs/Base/vagrant/#virtual-machine-conceptvm","title":"Virtual Machine concept(VM)","text":"<p>During Virtual machine creating we have to specify how much resources will be allocated from server(or your laptop) to such VM.</p> <p>Below is main resources which we define for vitrual machine</p> <ul> <li>CPU (processor cores)</li> <li>RAM (Memory, not a disk)</li> <li>DISK (disk space which will be consumed from server(or your laptop).</li> <li>Type of Operation system(Linux or Windows)</li> <li>Name (any human readable name)</li> </ul> <p>VM lives on you laptop and consume your resources like any other program. Turn it off when you finish work with them or delete it to free disk capacity.</p> <p></p> <p>For creation any of VMs need to use special software(program) which can control VMs and manage. </p> <p>Such type of software has name Hypervisor</p>"},{"location":"docs/Base/vagrant/#hypervisor-concept","title":"Hypervisor concept","text":"<p>Hypervior is software which can manage VM lifecycle(create, modify, delete).</p> <p>There is a list most popular Hypervisors which can be installed on laptop or server</p> Name Install on Linux Install on Windows Production Testing VirtualBox yes yes no yes Parallels yes no no yes RHEV yes no yes no KVM yes no yes* yes Hyper-V no yes yes yes Vmware yes no yes no <p>Below is diagram which shows Hypervisor role:</p> <p></p> <p>Where:</p> <ul> <li>Hardware is server or laptop with process,memory and disk(physical device)</li> <li>OS is Operation system on server/laptop like Linux/Windows/Macos</li> <li>Hypervisor is software on our Operation system</li> <li>Guest OS is Operation system on Virtual machine which is controlled by Hypervisor on our server/laptop</li> </ul>"},{"location":"docs/Base/vagrant/#parallels","title":"Parallels","text":"<p>Parallels is Hypervisor for MacOS which can be used for VM creation and management.</p> <p>This is icon of such software on your laptop</p> <p> </p> Warning <p>Do not update such preinstalled Parallels on your laptop, it will be broken, 100%.</p>"},{"location":"docs/Base/vagrant/#useful-links","title":"Useful Links","text":"<ul> <li>Russian article - Vagrant</li> </ul>"},{"location":"docs/Hints/linux/","title":"Linux commands","text":""},{"location":"docs/Hints/linux/#internal-commands","title":"Internal commands:","text":""},{"location":"docs/Hints/linux/#cat-show-content-of-file","title":"cat - show content of file","text":"<p>cat command  usually is used for reading content of text files. Sometimes can be used for combine content of two files</p> <p>Syntax</p> <pre><code>cat &lt;file&gt;\n</code></pre> <p>Exampes:</p> <p>Read the file</p> <pre><code>$ cat file1.txt\nHi there\n</code></pre> <p>Combine content of two files</p> <pre><code>$ cat file1.txt\nHi there\n$ cat file2.txt\nThis is admin\n$ cat file1.txt file2.txt\nHi there\nThis is admin\n</code></pre>"},{"location":"docs/Hints/linux/#echo-print-message-on-terminal-screen","title":"echo - print message on terminal screen","text":"<p>echo Very usefull command which allows to print messages to terminal.</p> <p>Usually used for writing something from terminal to file</p> <p>Syntax</p> <pre><code>echo 'text'\n</code></pre> <p>Examples:</p> <p>Show message \"Hello World\" to terminal</p> <pre><code>$ echo 'Hello World'\nHello World\n</code></pre> <p>Message \"Hello World\" add to new file or rewrite existing content</p> <pre><code>$ echo 'Hello World' &gt; file3.txt\n$ cat file3.txt \nHello World\n</code></pre> Note <p>Symbol &gt; in terminal means redirect output from command to file.</p> <p>Symbol &gt;&gt; in terminal means to add output from command to end of file.</p> <p>Add text 'From admin' to existing file file3.txt</p> <pre><code>$ echo 'From admin' &gt;&gt; file3.txt \n$ cat file3.txt \nHello World\nFrom admin\n</code></pre>"},{"location":"docs/Hints/linux/#id-info-about-user","title":"id - info about user","text":"<p>id command is used for getting info about users and their belonging to Linux groups</p> <p>Syntax:</p> <pre><code>id &lt;user&gt;\n</code></pre> <p>Examples:</p> <p>Show info about current user</p> <pre><code>$ id\nuid=1000(user1) gid=1000(user1) groups=1000(user1),10(wheel) context=unconfined_u:unconfined_r:unconfined_t:s0-s0:c0.c1023\n</code></pre> <p>Show info about root user</p> <pre><code>$ id root\nuid=0(root) gid=0(root) groups=0(root)\n</code></pre>"},{"location":"docs/Hints/linux/#pwd-current-directory","title":"pwd - current directory","text":"<p>pwd command show path to current directory. pwd - Print name of Working Directory</p> <p>Syntax:</p> <pre><code>pwd\n</code></pre> <p>Example</p> <p>Show current directory in terminal</p> <pre><code>$ pwd\n/home/user1\n</code></pre>"},{"location":"docs/Hints/linux/#cd-change-current-directory","title":"cd - change current directory","text":"<p>cd is short version of Change Directory. Used for jump between directories in Linux.</p> <p>Of course we can always use paths to files but sometime easy to jump to a directory and use relative path, not absolute</p> Note <ul> <li>ls /home/user1/file1.txt - it is absolute path(starting from /)</li> <li>cd /home/user1    ls file.txt - it is relative path    ls ./file.txt - also relative path</li> <li>cd /home    ls user1/file.txt - also relative path(not starting with /</li> </ul> <p>Syntax:</p> <pre><code>cd &lt;directory_path&gt;\n</code></pre> <p>Examples:</p> <p>Change current directory to root (/) directory.</p> <pre><code>cd /\n</code></pre> Note <p>In Linux heracial / is base directory which contains all other directories in Operation System</p> <p>Go to previous level of directory. double dot (..) is below level regards your current directory </p> <pre><code>$ cd dir1\n$ pwd\n/home/user1/dir1\n$ cd ..\n$ pwd\n/home/user1\n$ cd ..\n$ pwd\n/home\n</code></pre>"},{"location":"docs/Hints/linux/#ls-list-of-files","title":"ls - list of files","text":"<p>ls command can show content in a directory. ls means list</p> <p>Syntax</p> <pre><code>ls &lt;directory_path&gt;\n</code></pre> <p>Examples:</p> <p>Show content in current directory</p> <pre><code>$ ls\nfile1.txt  file2.txt\n</code></pre> <p>Sometimes directories in Linux contains hidden files. Their names started with dot(.). By defaut ls doesnt show them. use key -a to show them in output as well as other files/directories.</p> <pre><code>$ ls -a\n.  ..  .bash_history  .bash_logout  .bash_profile  .bashrc  file1.txt  file2.txt  .lesshst  .ssh  .viminfo\n</code></pre> <p>ls very useful to define owner of files/directories and their permissions and last modification date</p> <pre><code>$ ls -l\ntotal 8\n-rw-r--r--. 1 user1 user1  9 Jul 12 17:21 file1.txt\n-rw-r--r--. 1 user1 user1 14 Jul 12 17:22 file2.txt\n</code></pre> Note <p>why do we see total 8 in last output but command gave us only  2 files?</p>"},{"location":"docs/Hints/linux/#rm-remove-files","title":"rm - remove files","text":"<p>rm command helps to remove files or directories. rm means remove</p> <p>Syntax:</p> <pre><code>rm &lt;keys&gt; &lt;file or directory&gt;\n</code></pre> <p>Examples:</p> <p>Remove file</p> <pre><code>$ rm file1.txt\n</code></pre> <p>Remove file with option force(sometimes rm asks user to confirm remove operation, to avoid this use option -f that means force to delete file without asking</p> <pre><code>$ rm -f file1.txt\n</code></pre> <p>Remove empty directory</p> <pre><code>$ rm dir1\n</code></pre> <p>Sometimes directory can contain some files or other directories. In that case we can use key -r that means recoursive to delete directory and all subdirectoties and files inside</p> <pre><code>$ rm -f dir2\n</code></pre>"},{"location":"docs/Hints/linux/#ip-ip-address-info","title":"ip - ip address info","text":"<p>ip command shows information about existing network interfaces and their IP addresses. Also with ip command we can set new IP on an interface</p> Warning <p>using ip command for setting IP on interface is temporary change and it will be removed after OS reboot. For permanent changes need to use nmcli tool or directly change files in /etc/sysconfig/network-scripts or /etc/NetworkManager/system-connections/. It depends on version of Centos or RHEL OS.</p> <p>Syntax:</p> <pre><code>ip &lt;action&gt;\n</code></pre> <p>Where action can be:</p> <ul> <li>address(or just a) - show info about ip addresses and interfaces</li> <li>link - show info about only interfaces</li> <li>monitor - monitor state of interfaces(links)</li> <li>route - information about network routes</li> </ul> <p>Examples:</p> <p>Info about interfaces and their IP addresses</p> <pre><code>$ ip a\n\n1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000\n    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00\n    inet 127.0.0.1/8 scope host lo\n       valid_lft forever preferred_lft forever\n    inet6 ::1/128 scope host \n       valid_lft forever preferred_lft forever\n2: enp0s5: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc fq_codel state UP group default qlen 1000\n    link/ether 00:1c:42:79:17:10 brd ff:ff:ff:ff:ff:ff\n    inet 10.211.55.11/24 brd 10.211.55.255 scope global dynamic noprefixroute enp0s5\n       valid_lft 1569sec preferred_lft 1569sec\n    inet6 fdb2:2c26:f4e4:0:21c:42ff:fe79:1710/64 scope global dynamic noprefixroute \n       valid_lft 2591834sec preferred_lft 604634sec\n    inet6 fe80::21c:42ff:fe79:1710/64 scope link noprefixroute \n       valid_lft forever preferred_lft forever\n</code></pre> <p>Show info about network routes</p> <pre><code>$ ip route\ndefault via 10.211.55.1 dev enp0s5 proto dhcp src 10.211.55.11 metric 100 \n10.211.55.0/24 dev enp0s5 proto kernel scope link src 10.211.55.11 metric 100 \n</code></pre>"},{"location":"docs/Hints/linux/#yum-or-dnf-package-manager","title":"yum or dnf - Package Manager","text":"<p>Package Manager is a command which is responsible for Installation/Update/Deletion of Packages(software/programms) in Linux.</p> <p>Syntax:</p> <pre><code>yum &lt;action&gt; &lt;package&gt;\n</code></pre> <p>Where:</p> <p>action can be:</p> <ul> <li>install</li> <li>remove</li> <li>upgrade</li> </ul> <p>Installation example for ssh package:</p> <pre><code>yum install openssh\n</code></pre> <p>Delete example for ssh package</p> <pre><code>yum remove openssh\n</code></pre>"},{"location":"docs/Hints/linux/#rpm-local-package-manager","title":"rpm - Local Package Manager","text":"<p>rpm can also install/upgrade/delete packages but we need to specify such package like this</p> <p>Command above install package from file in Linux</p> <pre><code>rpm -i /home/user1/openssh.rpm\n</code></pre> <p>Main purpose of rpm tool is checking existing packages in a Linux</p> <p>Command shows list of installed packages in a Linux <pre><code>rpm -qa\n</code></pre></p> <p>Also with rpm we can find which package contains file in Linux</p> Note <p>Not all files in Linux belongs to rpm packages, but most of them belong</p> <p>Below commands get full path to command vi and find package for file '/usr/bin/vi' </p> <pre><code>$ which vi\n/usr/bin/vi\n\n$ rpm -qf /usr/bin/vi\nvim-minimal-8.2.2637-20.el9.x86_64\n</code></pre>"},{"location":"docs/Hints/linux/#commands-with-come-from-installed-packages","title":"Commands with come from installed packages:","text":""},{"location":"docs/Hints/linux/#vi-terminal-editor","title":"vi - terminal editor","text":"<p>Purpose: Terminal editor, allows to create,modify files</p> <p>Linux Package: vim-minimal</p> <p>Syntax:</p> <pre><code>vi &lt;file&gt;\n</code></pre> <p>Example:</p> <pre><code>vi file1.txt\n\nvi /home/user1/file1.txt\n</code></pre>"},{"location":"docs/Hints/linux/#ssh-remote-access","title":"ssh - remote access","text":"<p>Purpose: Remote access to server via IP or their DNS name</p> <p>Linux Package: openssh-clients</p> <p>Syntax:</p> <pre><code>ssh &lt;-i private_key&gt; &lt;user&gt;@&lt;server_ip&gt; &lt;command&gt;\n</code></pre> <p>Examples:</p> <p>Connect to remote server(1.2.3.4) with user \"john\"  and password</p> <pre><code>ssh john@1.2.3.4\n</code></pre> <p>Connect to remote server(2.3.4.5) with user \"john\" and ssh key \"demo-key\"</p> <pre><code>ssh -i demo-key john@2.3.4.5\n</code></pre> <p>Connect to remote server(127.0.0.1) with user \"mike\" and run command \"ip a\" for getting ip address of remote server</p> <pre><code>ssh mike@127.0.0.1 ip a\n</code></pre>"},{"location":"docs/Hints/linux/#ssh-copy-id","title":"ssh-copy-id","text":"<p>Purpose: Copy existing ssh public key to remote server for futher passwordless authentication</p> <p>Linux Package: openssh-clients</p> <p>Syntax:</p> <p><pre><code>ssh-copy-id &lt;-i private_key&gt; &lt;user&gt;@&lt;server_ip&gt;\n</code></pre> When we copy our public part of ssh key to server we need to enter password from remote user. Once command is done on remote server your public ssh key will be added to .ssh folder in authorized_keys file</p> <p>Example:</p> <p>Copy ssh public key \"demo-key.pub\" to remote server(192.168.1.2) with using remote user \"admin\"</p> <pre><code>ssh-copy-id -i demo-key admin@192.168.1.2\n</code></pre>"},{"location":"docs/Hints/linux/#ssh-keygen","title":"ssh-keygen","text":"<p>Purpose: Generate new ssh key</p> <p>Linux Package: openssh-clients</p> <p>Syntax:</p> <pre><code>ssh-keygen\n</code></pre> <p>Such command is need to specify filename for new private key. Public key will be created in the same place with extention .pub</p> <p>For example is you specify filename \"demo-key\", in your folder will be created two files:</p> <pre><code>demo-key\ndemo-key.pub\n</code></pre>"},{"location":"docs/Labs/editors/","title":"Lab for practice with vi editor","text":"<p>Step 1. Create a new file</p> <p>In a Linux/Macos there are several ways how to create a new file</p> <ul> <li>touch newfile.txt</li> <li>vi newfile.txt</li> </ul> <p>First command just creates ea new file</p> <p>Second command creates a new file and opens editor vi</p> <p>Step 2. Populate new file with following context</p> <pre><code>Hi, I'm working on Macos in VI editor\n</code></pre> Note <p>for start typing you need to activate INSERT mode, ESC+i</p> <p>Step 3. Save such file and close at the same time</p> Note <p>use following combination ESC + :wq ENTER</p> <p>Step 4. Read your file</p> <pre><code>cat newfile.txt\n</code></pre> Note <p>cat is Linux/Macos command to read files</p> <p>Step 5. Open you file and modify content</p> <pre><code>vi newfile.txt\n</code></pre> <p>Change content to:</p> <pre><code>Hi, I'm working second time on Macos in VI editor.\n</code></pre> <p>Step 6. Delete such file</p> <pre><code>rm newfile.txt\n</code></pre> Note <p>rm is Linux/Macos command for delete files or directories.   In some cases it asks to confirm deletion operation in terminal</p>"},{"location":"docs/Labs/parallels/","title":"Lab for VM management in Parallels","text":"<p>Step 1. Open a Parallels on Mac</p> <p></p> <p>Step 1a. (optional) Cancel update offer</p> <p>Step 1b. (optional) Close Windows7 window if it appeared and keep only Control Center window</p> <p></p> <p>There is one VM is exist on our laptop, lets shut it down</p> <p>Step 1c.(optional) Shut down existing VM with Windows 7.</p> <p></p> <p>Step 2. Create New VM</p> <p>Click on \"plus\" icon to run Creation Wizard(Installation Assistant)</p> <p></p> <p>Step 3. Choose installation from DVD or image file</p> <p></p> <p>Step 4. Installation Assistant tries to find any images (.iso files) on Laptop for your choosing</p> <p>Step 5. Choose first one with name CentOS-Stream-9-latest-x86_64-dvd1.iso</p> <p></p> Note <p>There many different Linux distributives like:  - CentOS (freeware version of RHEL)  - RHEL(Red Hat Enterprise Linux)  - Debian  - Ubuntu  - etc</p> <p>Step 6. Define new user for new Linux VM</p> <p>It will be user which can login to our VM and do some actions</p> <pre><code>User Name: user1\nPassword: password1\nVerify Password: password1\n</code></pre> <p></p> <p>Step 7. Specify name of new VM and location of file with VM</p> Note <p>Virtual Machine is a file actually and we can move it from one laptop/server ot another</p> Warning <p>Each Hypervisor has own format of VM files and almost all of them are incompatible. That means we cannot create VM in Parallels, copy such file to other server and run it in KVM Hypervisor for example.</p> <p>Dont forget to select Customize settings before installation to adjust CPU and RAM(memory) for new VM</p> <p></p> <p>Step 8. Configure VM settings(resources which will be allocated from your laptop/server to the VM)</p> <p></p> <p>Step 9. Allocate 1 CPU and and 1024 MB RAM and close such window</p> <p></p> <p>Step 10. Start VM initialization</p> <p></p> <p>Step 11. Run Linux installation</p> <p>On the appearing screen choose  by arrows buttons first option Install CentOS Stream 9 and press ENTER</p> <p></p> Note <p>Once you click on installation screen your cursor will be locked, to release it press CONTROL+OPTIONS on a keyboard</p> <p>Step 12. Set Linux settings before installation</p> <p>During this process we can choose which packages can be installed and configures various parameters for Linux Operation system like Language, user(which we specify above), network settings.</p> Note <p>Once installed you can find your VM file here /Users/your user/Parallels.</p> <p>*.pvm is Parallels file extensing which means that it is VM is created by Parallels Hypervisor.</p> <p>Step 12.1 Select language English</p> <p></p> <p>Step 12.2 Select Software packages for installation</p> <p>Click on Software Selection and Choose Minimal Install and Done</p> <p></p> <p>Step 12.3 Confirm disk for Linux installation</p> <p>Click on Installation Destination and Done</p> <p></p> <p>By default single disk is choosen and you don't need to select something. Just press Done.</p> <p>Step</p> <p>Step 12.4 Setup root(it is administrator) user</p> <p>Click on Root Password option and specify password for root user.</p> <p>Select  Allow root SSH login with password option</p> <p><pre><code>Root password: password1\nConfirm: password1\n</code></pre> </p> Note <p>Need to Press Done twice to confirm password for root user</p> <p>Step 12.5 Add user</p> <p>Click on User Creation and fill out the form</p> <pre><code>Full name: user1\nUser name: user1\nMake this user administrator: yes\nRequire apassword to use this account: yes\nPassword: password1\nConfirm password: password1\n</code></pre> <p></p> Note <p>Need to Press Done twice to confirm password for root user</p> <p>Step 13. Start Linux installation</p> <p>Click on Begin instalation</p> <p></p> <p>Wait until button Reboot System become active and Press it.</p> <p></p> <p>After that installation, VM will reboot and you will see *terminal with login page</p> Note <p>Once installed you can find your VM file here /Users//Parallels. <p>*.pvm is Parallels file extensing which means that it is VM is created by Parallels Hypervisor.</p> <p>Step 14. Login as user user1</p> <p>Use password from steps above</p> <p></p> <p></p> <p>Step 15. Get ip address of your new VM</p> <p>Linux has command ip for getting information about ip addressess across all interfaces in Operation System.</p> <p>Some servers/Laptops have more that one interface(for example one for management, second for data transfer to another servers)</p> <p>Example:</p> <p><pre><code>ip a\n</code></pre> a is argument means address. Literaly we can use</p> <pre><code>ip address - to show list of available interfaces and their ip addresses\n</code></pre> <p></p> <p>Step 16. Write down IP address of your VM.</p> <p>Step 17. Delete VM.</p> <p>Open Parallels Control Center.</p> <p>Right Click on your VM and delete it.</p>"},{"location":"docs/Labs/ssh/","title":"Lab for using SSH tool","text":"<p>In this lab we will try to remotely connect to own new created VM with linux from out local laptop/server</p> <p>Step 1. Create new ssh private/public key pair</p> <p>Use your local laptop/server, open a terminal and generate new key</p> <pre><code>Name for key: demo-key\n</code></pre> <p>Outcome: check that your current directory contains two files:</p> <pre><code>ls -l \n\ndemo-key\ndemo-key.pub\n</code></pre> <p>Step 2. Add our public key to remote VM</p> <p>For remote VM we will use VM from Lab for VM management in Parallels</p> <p>For key, file from Step 1 of this Lab</p> <pre><code>ssh-copy-id -i demo-key user1@&lt;vm_ip_address&gt;\n</code></pre> Note <p>As a result of such command, the content of demo-key.pub file will to copied to remote VM in /home/user1/.ssh/authorized_keys</p> <p>Step 3. Connect to remote VM with using your private key demo-key</p> <p>Step 4. Log out from session:</p> <p>There are two options:</p> <ul> <li>Use Linux command exit</li> <li>Use CTRL+D to close a ssh session</li> </ul> <p>Step 5. Get information about ip address of remote VM with using ssh as an one command.</p> <pre><code>ssh -i demo-key user1@&lt;vm_ip_address&gt; ip a\n</code></pre>"},{"location":"docs/Labs/vagrant/","title":"Lab Vagrant for VM management","text":"<p>In the Lab we will install multiple VMs on your server/laptop with using Parallels as a Hypervisor and Vagrant which can configure such Hypervisor</p>"},{"location":"docs/Labs/vagrant/#step-1-create-vagrant-configuration-file","title":"Step 1. Create Vagrant Configuration file","text":"<p>Vagrant looks for configuration(aka instruction) in a folder which we run vagrant command.</p> <p>Lets create a new directory</p> <pre><code>$ mkdir vagrant_lab\n</code></pre> <p>Now we need to go to new created directory and create configuration file for Vagrant</p> <pre><code>$ cd vagrant_lab\n\n$ vi Vagrantfile\n\n$ cat Vagrantfile\nVagrant.configure(2) do |config|\n\n  config.vm.define \"server1\" do |conf|\n    conf.vm.synced_folder \".\", \"/vagrant\", disabled: true\n    conf.vm.box = \"generic/centos9s\"\n    conf.vm.provider \"parallels\" do |v|\n      v.memory = 2048\n      v.cpus = 1\n      v.name = 'server1'\n      v.customize [\"set\", :id, \"--hypervisor-type\", \"apple\"]\n    end\n  end\nend\n</code></pre> Note <p>Vagrantfile is a special file name for vagrant command.</p> <p>When we run vagrant command, it will try to read in the current directory file  Vagrantfile, if file doesnt exist, will be error.</p> <p>Line config.vm.define \"server1\" do |conf| means that want to describe new VM with name \"server1\". Such name we can use only for command vagrant to specify which VM we want to Up/Down/Destroy/Create like vagrant up server1</p> <p>Line conf.vm.provider \"parallels\" do |v| means that we don't want to have shared(common) folders with Macos and new created VM</p> <p>Line conf.vm.box = \"generic/centos9s\" means that we want to use image centos9 for our VM.</p> <p>Here is a list of available images for VMs which vagrant can use</p> Note <p>In Vagrant terminology box means image</p> <p>Line conf.vm.provider \"parallels\" do |v| means that we want to use Parallels as a hypervisor</p> Note <p>On laptop/server can be installed multiple Hypervisors. It is not reccomended by the way.</p> <p>Line v.name = 'server1' means that we define name of VM. If you open Parallels Control center you will see name of VMs. Proper naming helps to easily identify required VM. Such name is not hostname in Operation system inside such VM.!!!</p>"},{"location":"docs/Labs/vagrant/#step-2-run-vm-by-using-vagrant","title":"Step 2. Run VM by using Vagrant","text":"<p>For running new VM type following command</p> <pre><code>$ vagrant up\n\nor if you which to specify which vm should be started\n\n$ vagrant up server1\n</code></pre>"},{"location":"docs/Labs/vagrant/#step-3-login-to-new-vm","title":"Step 3. login to new VM","text":"<pre><code>$ vagrant ssh server1\n</code></pre> <p>Get host name of you deployed VM and IP address</p> <pre><code>$ hostname\n$ ip a\n</code></pre> <p>or</p> <pre><code>$ vagrant ssh server1 hostname\n$ vagrant ssh server1 ip a\n</code></pre>"},{"location":"docs/Labs/vagrant/#step-4-remove-vm-via-vagrant","title":"Step 4. Remove VM via Vagrant","text":"<pre><code>$ vagrant destroy server1\n</code></pre>"},{"location":"docs/Labs/vagrant/#step-5-customization-of-vm-provisioning","title":"Step 5. Customization of VM provisioning","text":"<p>As you could see previous VM doesnt have any hostname and IP was unpredictable(randomly chosen).</p> <p>There are many cases when we need to explisitly specify IP address and hostname for new create VM.</p> <p>Lets do it</p> <p>Open Vargantfile and add following lines under config.vm.define \"server1\" do |conf| section</p> <pre><code>conf.vm.hostname = 'server1.example.com'\nconf.vm.network \"private_network\", ip: \"192.168.0.11\"\n</code></pre> <p>Line conf.vm.hostname = 'server1.example.com' means that we define name of server in Linux. When you login to your new VM which is created by Vagrant you will see name of server is server1.example.com instead of default localhost</p>"},{"location":"docs/Labs/vagrant/#step-6-lets-create-again-vm-with-custom-hostname-and-ip-address","title":"Step 6. Lets create again VM with custom hostname and ip address","text":"<pre><code>$ vagrant up server1\n$ vagrant ssh server1 hostname\n$ vagrant ssh server1 ip a\n</code></pre>"},{"location":"docs/Labs/vagrant/#step-7-remove-vm-via-vagrant","title":"Step 7. Remove VM via Vagrant","text":""},{"location":"docs/Labs/vagrant/#step-8-try-to-create-three-vm-with-following-parameters","title":"Step 8*. Try to create three VM with following parameters:","text":"Name in Vagrant Hostname VM name IP address CPU RAM Image bastion bastion.example.com VMbastion 192.168.0.100 2 2 generic/centos9s webserver web.example.com VMwebserver 192.168.0.101 2 2 generic/centos9s fileserver file.example.com VMfileserver 192.168.0.102 2 2 generic/centos9s <p>Login to each of three VMs and get their hostname and IP addresses and check that are matched with table above</p>"},{"location":"docs/Labs/vagrant/#step-9-stop-vms-destroy-them-and-delete-vagrant-config","title":"Step 9. Stop VMs, Destroy them and delete Vagrant config","text":"<pre><code>$ vagrant destroy\n$ cd ..\n$ rm -rf vagrant_lab\n</code></pre> Note <p>You can destroy one by one VMs with specify name of VM in vagrant destroy  command"}]}